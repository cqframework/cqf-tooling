<?xml version="1.0" encoding="utf-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="urn:hl7-org:cdsdt:r2" xmlns:dt="urn:hl7-org:cdsdt:r2" targetNamespace="urn:hl7-org:cdsdt:r2" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation>Specifies data types used.  The data types are a simplified/constrained version of the HL7 version 3 datatypes specification, release 2, which is itself based on the implementable specification of ISO 21090 data types.</xs:documentation>
	</xs:annotation>
	<xs:complexType name="AD">
		<xs:annotation>
			<xs:documentation>Mailing and home or office addresses. 

AD is primarily used to communicate data that will allow printing mail labels, or that will allow a person to physically visit that address. The postal address datatype is not supposed to be a container for additional information that might be useful for finding geographic locations (e.g., GPS coordinates) or for performing epidemiological studies. Such additional information should be captured by other, more appropriate data structures.

Addresses are essentially sequences of address parts, but add a "use" code and a valid time range for information about if and when the address can be used for a given purpose.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ANY">
				<xs:sequence>
					<xs:element name="part" type="ADXP" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>A sequence of address parts, such as street or post office Box, city, postal code, country, etc.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="use" type="set_PostalAddressUse" use="optional">
					<xs:annotation>
						<xs:documentation>A set of codes advising a system or user which address in a set of like addresses to select for a given purpose. 
An address without specific use code might be a default address useful for any purpose, but an address with a specific use code would be preferred for that respective purpose.
If populated, the values contained in this attribute SHALL be taken from the HL7 PostalAddressUse code system.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="AddressPartType">
		<xs:annotation>
			<xs:documentation>Specifies whether an address part names the street, city, country, postal code, post box, etc. If the type is NULL the address part is unclassified. 

CodeSystem "AddressPartType", OID: 2.16.840.1.113883.5.16, Owner: HL7 </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="AL">
				<xs:annotation>
					<xs:documentation>Address Line: An address line is for either an additional locator, a delivery address or a street address. An address generally has only a delivery address line or a street address line, but not both. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="ADL">
				<xs:annotation>
					<xs:documentation>Additional Locator : This can be a unit designator, such as apartment number, suite number, or floor. There may be several unit designators in an address (e.g., "3rd floor, Appt. 342"). This can also be a designator pointing away from the location, rather than specifying a smaller location within some larger one (e.g., Dutch "t.o." means "opposite to" for house boats located across the street facing houses)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="UNID">
				<xs:annotation>
					<xs:documentation>Unit Identifier : The number or name of a specific unit contained within a building or complex, as assigned by that building or complex</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="UNIT">
				<xs:annotation>
					<xs:documentation>Unit Designator: Indicates the type of specific unit contained within a building or complex. E.g. Apartment, Floor</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DAL">
				<xs:annotation>
					<xs:documentation>Delivery Address Line: A delivery address line is frequently used instead of breaking out delivery mode, delivery installation, etc. An address generally has only a delivery address line or a street address line, but not both. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DINST">
				<xs:annotation>
					<xs:documentation>Delivery Installation Type: Indicates the type of delivery installation (the facility to which the mail will be delivered prior to final shipping via the delivery mode.) Example: post office, letter carrier depot, community mail center, station, etc. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DINSTA">
				<xs:annotation>
					<xs:documentation>Delivery Installation Area: The location of the delivery installation, usually a town or city, and is only required if the area is different from the municipality. Area to which mail delivery service is provided from any postal facility or service such as an individual letter carrier, rural route, or postal route. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DINSTQ">
				<xs:annotation>
					<xs:documentation>Delivery Installation Qualifier: A number, letter or name identifying a delivery installation. E.g., for Station A, the delivery installation qualifier would be 'A'. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DMOD">
				<xs:annotation>
					<xs:documentation>Delivery Mode: Indicates the type of service offered, method of delivery. For example: post office box, rural route, general delivery, etc.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DMODID">
				<xs:annotation>
					<xs:documentation>Delivery Mode Identifier: Represents the routing information such as a letter carrier route number. It is the identifying number of the designator (the box number or rural route number). </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SAL">
				<xs:annotation>
					<xs:documentation>Street Address Line: A street address line is frequently used instead of breaking out build number, street name, street type, etc. An address generally has only a delivery address line or a street address line, but not both. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BNR">
				<xs:annotation>
					<xs:documentation>Building Number: The number of a building, house or lot alongside the street. Also known as "primary street number". This does not number the street but rather the building. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BNN">
				<xs:annotation>
					<xs:documentation>Building Number Numeric: The numeric portion of a building number</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BNS">
				<xs:annotation>
					<xs:documentation>Building Number Suffix: Any alphabetic character, fraction or other text that may appear after the numeric portion of a building number</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="STR">
				<xs:annotation>
					<xs:documentation>Street Name: The name of the street, including the type</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="STB">
				<xs:annotation>
					<xs:documentation>Street Name Base: The base name of a roadway or artery recognized by a municipality (excluding street type and direction)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="STTYP">
				<xs:annotation>
					<xs:documentation>Street Type: The designation given to the street. (e.g. Street, Avenue, Crescent, etc.)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DIR">
				<xs:annotation>
					<xs:documentation>Direction (e.g., N, S, W, E)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="INT">
				<xs:annotation>
					<xs:documentation>Intersection: An intersection denotes that the actual address is located at or close to the intersection of two or more streets</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CAR">
				<xs:annotation>
					<xs:documentation>Care Of: The name of the party who will take receipt at the specified address, and will take on responsibility for ensuring delivery to the target recipient </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CEN">
				<xs:annotation>
					<xs:documentation>Census Tract: A geographic sub-unit delineated for demographic purposes.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CNT">
				<xs:annotation>
					<xs:documentation>Country</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CPA">
				<xs:annotation>
					<xs:documentation>County or Parish: A sub-unit of a state or province. (49 of the United States of America use the term "county;" Louisiana uses the term "parish".)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CTY">
				<xs:annotation>
					<xs:documentation>Municipality: The name of the city, town, village, or other community or delivery center</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DEL">
				<xs:annotation>
					<xs:documentation>Delimiter: Delimiters are printed without framing white space. If no value component is provided, the delimiter appears as a line break.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="POB">
				<xs:annotation>
					<xs:documentation>Post Box: A numbered box located in a post station.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PRE">
				<xs:annotation>
					<xs:documentation>Precinct: A subsection of a municipality</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="STA">
				<xs:annotation>
					<xs:documentation>State or Province: A sub-unit of a country with limited sovereignty in a federally organized country.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="ZIP">
				<xs:annotation>
					<xs:documentation>Postal Code: A postal code designating a region defined by the postal service.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DPID">
				<xs:annotation>
					<xs:documentation>Delivery Point Identifier : A value that uniquely identifies the postal address.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="ADXP">
		<xs:annotation>
			<xs:documentation>A part with a type-tag signifying its role in the address. Typical parts that exist in about every address are street, house number, or post box, postal code, city, country but other roles may be defined regionally, nationally, or on an enterprise level (e.g. in military addresses). </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="XP">
				<xs:attribute name="type" type="AddressPartType" use="required">
					<xs:annotation>
						<xs:documentation>Whether an address part names the street, city, country, postal code, post box, address line 1, etc.
The value of this attribute SHALL be taken from the HL7 AddressPartType code system.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ANY" abstract="true">
		<xs:annotation>
			<xs:documentation>Defines the basic properties of every data value. This is conceptually an abstract type, meaning that no proper value can be just a data value without belonging to any concrete type. Every public concrete type is a specialization of this general abstract DataValue type. 

However exceptional values (nullFlavored values) may be of type ANY, except for the exceptional values that imply the nullFlavor INV, since this requires a type to be meaningful. Note that not all nullFlavors may be used with the type ANY.

This class is maintained here despite the lack of attributes to maintain compatibility with the ISO 21090 data structure.

We have also made it abstract to be consistent with the lack of support for nullFlavors.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="HXIT"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BL">
		<xs:annotation>
			<xs:documentation>BL stands for the values of two-valued logic. A BL value can be either true or false.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ANY">
				<xs:attribute name="value" type="xs:boolean" use="required">
					<xs:annotation>
						<xs:documentation>The value of the BL.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="CalendarCycle">
		<xs:restriction base="xs:string">
			<xs:enumeration value="CY">
				<xs:annotation>
					<xs:documentation>year</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="MY">
				<xs:annotation>
					<xs:documentation>month of the year </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CM">
				<xs:annotation>
					<xs:documentation>month (continuous) </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CW">
				<xs:annotation>
					<xs:documentation>week (continuous) </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="WM">
				<xs:annotation>
					<xs:documentation>week of the month</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="WY">
				<xs:annotation>
					<xs:documentation>week of the year </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DM">
				<xs:annotation>
					<xs:documentation>day of the month </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CD">
				<xs:annotation>
					<xs:documentation>day (continuous) </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DY">
				<xs:annotation>
					<xs:documentation>day of the year </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DW">
				<xs:annotation>
					<xs:documentation>day of the week (begins with monday) </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="HD">
				<xs:annotation>
					<xs:documentation>hour of the day </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CH">
				<xs:annotation>
					<xs:documentation>hour (continuous) </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="NH">
				<xs:annotation>
					<xs:documentation>minute of the hour </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CN">
				<xs:annotation>
					<xs:documentation>minute (continuous) </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SN">
				<xs:annotation>
					<xs:documentation>second of the minute </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CS">
				<xs:annotation>
					<xs:documentation>second (continuous) </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="CD">
		<xs:annotation>
			<xs:documentation>A CD is a reference to a concept defined in an external code system, terminology, or ontology.

A CD may also contain an original text or phrase that served as the basis of the coding.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ANY">
				<xs:sequence>
					<xs:element name="displayName" type="ST" minOccurs="0">
						<xs:annotation>
							<xs:documentation>A name, title, or representation for the code or expression as it exists in the code system.
If populated, the displayName SHALL be a valid human readable representation of the concept as defined by the code system at the time of data entry. The displayName SHALL conform to any rules defined by the codingSystem; if the codeSystem does not define a human representation for the code or expression, then none can be provided. displayName is included both as a courtesy to an unaided human interpreter of a code value and as a documentation of the name used to display the concept to the user. The display name has no functional meaning; it SHALL never exist without a code; and it SHALL never modify the meaning of the code. A display name may not be present if the code is an expression for which no display name has been assigned or can be derived. Information Processing Entities claiming direct or indirect conformance MAY choose not to implement displayName but SHALL NOT reject instances because displayName is present.
Display names SHALL not alter the meaning of the code value. Therefore, display names SHOULD NOT be presented to the user on a receiving application system without ascertaining that the display name adequately represents the concept referred to by the code value. Communication SHALL NOT simply rely on the display name. The display name's main purpose is to support implementation debugging.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="originalText" type="ST" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The text as seen and/or selected by the user who entered the data which represents the intended meaning of the user.  

Note: Local implementations may influence what is required to represent that original text.

Original text can be used in a structured user interface to capture what the user saw as a representation of the code on the data input screen, or in a situation where the user dictates or directly enters text, it is the text entered or uttered by the user. 

It is valid to use the CD datatype to store only the text that the user entered or uttered. In this situation, original text will exist without a code. In a situation where the code is assigned sometime after the text was entered, originalText is the text or phrase used as the basis for assigning the code. 

The original text SHALL be an excerpt of the relevant information in the original sources, rather than a pointer or exact reproduction. Thus the original text SHALL be represented in plain text form. In specific circumstances, when clearly descirbed the context of use, the originalText may be a reference to some other text artefact for which the resolution scope is clearly described.

Values of type CD MAY have a original text despite not having a code. Any CD value with no code signifies a coding exception. In this case, originalText is a name or description of the concept that was not coded. </xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="translation" type="CD" minOccurs="0" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>Translation of the base code / codeSystem to other codeSystems.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="code" type="Code" use="optional">
					<xs:annotation>
						<xs:documentation>The plain code symbol defined by the code system, or an expression in a syntax defined by the code system which describes the concept. 
Code SHALL be an exact match to a plain code symbol or expression defined by the code system. If the code system defines a code or expression that includes whitespace, the code SHALL include the whitespace. An expression can only be used where the codeSystem either defines an expression syntax, or there is a generally accepted syntax for the codeSystem. A code system may be defined that only defines an expression syntax with bindings to other code Systems for the elements of the expression. 
It is at the discretion of the interpreting system whether to check for an expression instead of a simple code and evaluate the expression instead of treating the expression as a code. In some cases, it may be unclear or ambiguous whether the code represents a single symbol or an expression. This usually arises where the code system defines an expression language and then defines pre-coordinated concepts with symbols which match their expression, e.g. UCUM. In other cases, it is safe to treat the expression as a symbol. There is no guarantee that this is always safe: the definitions of the codeSystem should always be consulted to determine how to handle potential expressions.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="codeSystem" type="Uid" use="optional">
					<xs:annotation>
						<xs:documentation>The code system that defines the code, or if no code was found, the codeSystem in which no code was found. 
Code systems SHALL be referred to by a UID, which allows unambiguous reference to standard code systems and other local codesystems. Where either ISO or HL7 have assigned UID to code Systems, then these UIDs SHALL be used. Otherwise implementations SHALL use an appropriate ISO Object Identifier (OID) or UUID to construct a globally unique local coding system identifier.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="codeSystemName" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation>The common name of the coding system. 

The code system name has no computational value. codeSystemName can never modify the meaning of codeSystem and cannot exist without codeSystem.

Information Processing Entities claiming direct or indirect conformance SHALL NOT functionally rely on codeSystemName. In addition, they MAY choose not to implement codeSystemName; but SHALL NOT reject instances because codeSystemName is present.

Note:  The purpose of a code system name is to assist an unaided human interpreter of a code value to interpret codeSystem.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="codeSystemVersion" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation>If applicable, a version descriptor defined specifically for the given code system.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="valueSet" type="Uid" use="optional">
					<xs:annotation>
						<xs:documentation>The value set that applied when this CD was created.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="valueSetVersion" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation>The version of the valueSet in which the code was found.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="CO">
		<xs:annotation>
			<xs:documentation>Represents data where coded values are associated with a specific order. 

Note:  CO may be used for things that model rankings and scores, e.g. likert scales, pain, Apgar values, etc, where there is a) implied ordering, b) no implication that the distance between each value is constant, and c) the total number of values is finite. CO may also be used in the context of an ordered code system. In this case, it may not be appropriate or even possible to use the value attribute, but CO may still be used so that models that make use of such code systems may introduce model elements that involve statements about the order of the terms in a domain.

The relative order of values in a code system need not be independently obvious in the literal representation of the CO. It these circumstances, is expected that an application will look up the ordering of these values from some definition of the code system. 

Some of the code systems will directly assign numerical value to the concepts that are suitable for some mathemetical operations.

Though it would generally make sense, applications SHOULD not assume that the translations of the code, if provided, will have the same ordering as the CO. Translations SHALL not be considered when the ordering of the code system is determined.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="QTY">
				<xs:sequence>
					<xs:element name="code" type="CD" minOccurs="0">
						<xs:annotation>
							<xs:documentation>A code representing the definition of the ordinal item</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="value" type="Decimal" use="optional">
					<xs:annotation>
						<xs:documentation>A numerical value associated with the coded ordinal value.
The value may be constrained to an integer in some contexts of use. If code is nonNull, value SHALL only be nonNull if the code system explicitly assigns a value to the concept.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="Code">
		<xs:annotation>
			<xs:documentation>A code representing the string data. For example, the string data may be a user-message out of a message-catalog where the code represents the identifier of the message in the message catalog. </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<xs:simpleType name="Compression">
		<xs:annotation>
			<xs:documentation>The compression algorithm, specified in the HL7 CompressionAlgorithm code system.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="DF">
				<xs:annotation>
					<xs:documentation>Deflate : The deflate compressed data format as specified in IETF RFC 1951.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="GZ">
				<xs:annotation>
					<xs:documentation>GZIP : A compressed data format that is compatible with the widely used GZIP utility as specified in IETF RFC 1952(uses the deflate algorithm).</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="ZL">
				<xs:annotation>
					<xs:documentation>ZLIB : A compressed data format that also uses the deflate algorithm. Specified as IETF RFC 1950.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Z">
				<xs:annotation>
					<xs:documentation>Compress : Original UNIX compress algorithm and file format using the LZC algorithm (a variant of LZW). Patent encumbered and less efficient than deflate.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BZ">
				<xs:annotation>
					<xs:documentation>BZIP : bzip-2 compression format. See [http://www.bzip.org/] for more information.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="Z7">
				<xs:annotation>
					<xs:documentation>Z7 : 7z compression file format. See [http://www.7-zip.org/7z.html] for more information. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="CS">
		<xs:annotation>
			<xs:documentation>Coded data in its simplest form, where only the code is not predetermined. 

The code system and code system version are implied and fixed by the context in which the CS value occurs.  

Due to its highly restricted functionality, CS SHALL only be used for simple structural attributes with highly controlled and stable terminologies where:
- all codes come from a single code system
- codes are not reused if their concept is deprecated
- the publication and extensibility properties of the code system are well described and understood</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ANY">
				<xs:attribute name="code" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>The plain code symbol defined by the code system.  If the code value is empty or null, then there is no code in the code system that represents the concept.
Code SHALL only contain characters that are either a letter, a digit, or one of '.', '-', '_' or ':'. Code systems that are used with CS SHALL NOT define code symbols or expression syntaxes that contain whitespace or any other characters not in this list.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="Decimal">
		<xs:annotation>
			<xs:documentation>A number that is not restricted to an integer, and may contain fractional values between two integers.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:double"/>
	</xs:simpleType>
	<xs:complexType name="ED">
		<xs:annotation>
			<xs:documentation>Data that is primarily intended for human interpretation or for further machine processing outside the scope of this specification. This includes unformatted or formatted written language, multimedia data, or structured information as defined by a different standard (e.g., XML-signatures.) 
Encapsulated data can be present in two forms, inline or by reference. The content is the same whether it is located inline or remote. Inline data is communicated or moved as part of the encapsulated data value, whereas by-reference data may reside at a different  location: a URL/URI that provides reference to the information required to locate the data. Inline data may be provided in one of 3 different ways:

1) as a plain sequence of characters (value)
2) as a binary (a sequence of bytes) (data
3) as xml content (xml)

Content SHALL be provided if the ED has no nullFlavor. The content may be provided in-line (using only one of value, data or xml), or it may be provided as a reference.Content may be provided in-line and a reference also may be given; in these cases, it is expected that the content of the reference will be exactly the same as the in-line content. Information Processing Entities are not required to check this, but may regard it as an error condition if the content does not match</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ANY">
				<xs:sequence>
					<xs:element name="data" type="xs:base64Binary" minOccurs="0">
						<xs:annotation>
							<xs:documentation>A simple sequence of byte values that contains the content. (Base64 Encoded String).</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="xml" type="xs:anyType" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The content represented in plain XML form.

A direct representation is provided for XML. This is because this specification includes an XML serialization of the data, and this xml attribute is handled specially in the serialisation form. The xml data is not different in any semantic sense to the same data if represented in the value or data attributes.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="reference" type="TEL" minOccurs="0">
						<xs:annotation>
							<xs:documentation>A URL the target of which provides the binary content.

The semantic value of an encapsulated data value is the same, regardless whether the content is present as inline content or just by reference. However, an encapsulated data value without inline content behaves differently, since any attempt to examine the content requires the data to be downloaded from the reference. An encapsulated data value may have both inline content and a reference.

If data is provded in the value, data or xml attributes, the reference SHALL point to the same data. It is an error if the data resolved through the reference does not match either the integrity check, data as provided, or data that had earlier been retrieved through the reference and then cached. The mediatype of the ED SHALL match the type returned by accessing the reference. 

The reference may contain a usablePeriod to indicate that the data may only be available for a limited period of time. Whether the reference is limited by a usablePeriod or not, the content of the reference SHALL be fixed for all time. Any application using the reference SHALL always receive the same data, or an error. The reference cannot be reused to send a different version of the same data, or different data</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="integrityCheck" type="xs:base64Binary" minOccurs="0">
						<xs:annotation>
							<xs:documentation>A checksum calculated over the binary data

The purpose of this property, when communicated with a reference is for anyone to validate later whether the reference still resolved to the same content that the reference resolved to when the encapsulated data value with reference was created. If the attribute is null, there is no integrityCheck.
It is an error if the data resolved through the reference does not match the integrity check. 
The integrity check is calculated according to the integrityCheckAlgorithm. By default, the Secure Hash Algorithm-1 (SHA-1) shall be used. The integrity check is binary encoded according to the rules of the integrity check algorithm. 
The integrity check is calculated over the raw binary data that is contained in the data component, or that is accessible through the reference. No transformations are made before the integrity check is calculated. If the data is compressed, the Integrity Check is calculated over the compressed data. </xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="description" type="ST" minOccurs="0">
						<xs:annotation>
							<xs:documentation>An alternative description of the media where the media is not able to be rendered. 

E.g. Short text description of an image or sound clip, etc. This attribute is not intended to be a complete substitute for the original. For complete substitutes, use the &amp;#34;translation&amp;#34; property.

The intent of this property is to allow compliance with disability requirements such as those expressed in American&amp;#39;s with Disability Act (also known as &amp;#34;Section 508&amp;#34;), where there is a requirement to provide a short text description of included media in some form that can be read by a screen reader. This is similar to a very short thumbnail with mediaType = text/plain.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="value" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation>A simple sequence of characters that contains the content. 

If value is used, the mediatype is fixed to text/plain and the charset must be consistent with the String Character Set. Refer to section 6.7.5 for more details</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="mediaType" type="Code" use="optional" default="text/plain">
					<xs:annotation>
						<xs:documentation>Identifies the type of the encapsulated data and can be used to determine a method to interpret or render the content. 

The IANA defined domain of media types is established by the IETF RFCs 2045 and 2046. mediaType has a default value of text/plain and cannot be null. If the media type is different to text/plain, the &amp;#60;i&amp;#62;mediaType&amp;#60;/i&amp;#62; attribute SHALL be populated.

If the content is compressed using a specified compression algorithm, the mediaType SHALL refer the mediaType of the uncompressed data, whether the data is accessed by reference or not. </xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="charset" type="Code" use="optional">
					<xs:annotation>
						<xs:documentation>An Internet Assigned Numbers Authority (IANA) Charset Registered character set and character encoding for character-based encoding types&amp;#60;b&amp;#62;. &amp;#60;/b&amp;#62;

Whenever the content of the ED is character type data in any form, the charset property needs to be known. If the content is provided directly in the value attribute, then the charset SHALL be a known character set consistent with the String Character Set. Refer to section 6.7.5 for more details. If the content is provided as a reference, and the access method does not provide the charset for the content (such as by a mime header), then the charset SHALL be conveyed as part of the ED</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="language" type="Code" use="optional">
					<xs:annotation>
						<xs:documentation>The human language of the content. Valid codes are taken from the IETF RFC 3066. If this attribute is null, the language may be inferred from elsewhere, either from the context or from unicode language tags, for example.

Conformance profiles SHOULD define defaulting rules for language for a given usage environment of this specification.

Note: While language attribute usually alters the interpretation of the text, the language attribute does not alter the meaning of the characters in the text.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="compression" type="Compression" use="optional">
					<xs:annotation>
						<xs:documentation>The compression algorithm, if any, used on the raw byte data.

If the attribute is null, the data is not compressed. Compression only applies to the binary form of the content.

If populated, the value of this attribute SHALL be taken from the HL7 CompressionAlgorithm code system.

Some compression formats allow multiple archive files to be embedded within a single compressed volume. Applications SHALL ensure that the decompressed form of the data conforms to the stated media type.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="integrityCheckAlgorithm" type="IntegrityCheckAlgorithm" use="optional">
					<xs:annotation>
						<xs:documentation>The algorithm used to compute the integrityCheck value.
If populated, the value of this attribute SHALL be taken from the HL7 IntegrityCheckAlgorithm code system.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="EN">
		<xs:annotation>
			<xs:documentation>A name for a person, organization, place or thing. 

Examples:   Jim Bob Walton, Jr., Health Level Seven, Inc., Lake Tahoe, etc. An entity name may be as simple as a character string or may consist of several entity name parts, such as, Jim, Bob, Walton, and Jr., Health Level Seven, and Inc.

Entity names are essentially sequences of entity name parts, but add a "use" code.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ANY">
				<xs:sequence>
					<xs:element name="part" type="ENXP" maxOccurs="unbounded">
						<xs:annotation>
							<xs:documentation>A sequence of name parts, such as given name or family name, prefix, suffix, etc.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="use" type="set_EntityNameUse" use="optional">
					<xs:annotation>
						<xs:documentation>A set of codes advising a system or user which name in a set of names to select for a given purpose. 
A name without specific use code might be a default name useful for any purpose, but a name with a specific use code would be preferred for that respective purpose. Names SHOULD not be collected without at least one use code, but names MAY exist without use code, particularly for legacy data.
If populated, the values contained in this attribute SHALL be taken from the HL7 EntityNameUse2 code system.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="EntityNamePartQualifier">
		<xs:annotation>
			<xs:documentation>The qualifier is a set of codes each of which specifies a certain subcategory of the name part in addition to the main name part type. For example, a given name may be flagged as a nickname, a family name may be a pseudonym or a name of public records. 

CodeSystem "EntityNamePartTypeQualifierR2", OID: 2.16.840.1.113883.5.1122, Owner: HL7 </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="LS">
				<xs:annotation>
					<xs:documentation>Legal Status : For organizations a suffix indicating the legal status, e.g., "Inc.", "Co.", "AG", "GmbH", "B.V." "S.A.", "Ltd." Etc.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="AC">
				<xs:annotation>
					<xs:documentation>Academic : Indicates that a prefix like "Dr." or a suffix like "M.D." or "Ph.D." is an academic title </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="NB">
				<xs:annotation>
					<xs:documentation>Nobility : In Europe and Asia, there are still people with nobility titles (aristocrats). German "von" is generally a nobility title, not a mere voorvoegsel. Others are "Earl of" or "His Majesty King of..." etc. Rarely used nowadays, but some systems do keep track of this </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PR">
				<xs:annotation>
					<xs:documentation>Professional : Primarily in the British Imperial culture people tend to have an abbreviation of their professional organization as part of their credential suffices </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="HON">
				<xs:annotation>
					<xs:documentation>Honorific : A honorific such as "The Right Honourable" or "Weledelgeleerde Heer".  </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BR">
				<xs:annotation>
					<xs:documentation>Birth : A name that a person was given at birth or established as a consequence of adoption.  

Note: this is not used for temporary names assigned at birth such as "Baby of Smith" - which is just a name with a use code of "TEMP".</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="AD">
				<xs:annotation>
					<xs:documentation>Acquired : A name part a person acquired.  

The name part may be acquired by adoption, or the person may have chosen to use the name part for some other reason.

Note: this differs from an Other/Psuedonym/Alias in that an acquired name part is acquired on a formal basis rather than an informal one (e.g. registered as part of the official name)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SP">
				<xs:annotation>
					<xs:documentation>Spouse : The name assumed from the partner in a marital relationship. Usually the spouse's family name. Note that no inference about gender can be made from the existence of spouse names</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="MID">
				<xs:annotation>
					<xs:documentation>Middle Name : Indicates that the name part is a middle name.
Usage Notes:
In general, the english 'middle name' concept is all of the given names after the first. This qualifier may be used to explicitly indicate which given names are considered to be middle names. 
The middle name qualifier may also be used with family names. This is a Scandinavian use case, matching the concept of "mellomnavn" / "mellannamn". Note that there are specific rules that indicate what names may be taken as a mellannamn in different Scandinavian countries</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="CL">
				<xs:annotation>
					<xs:documentation>Callme : Callme is used to indicate which of the various name parts is used when interacting with the person</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="IN">
				<xs:annotation>
					<xs:documentation>Initial : Indicates that a name part is just an initial. Initials do not imply a trailing period since this would not work with non-Latin scripts. Initials may consist of more than one letter, e.g., "Ph." could stand for "Philippe" or "Th." for "Thomas"</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PFX">
				<xs:annotation>
					<xs:documentation>Prefix : A prefix has a strong association to the immediately following name part. A prefix has no implicit trailing white space (it has implicit leading white space though).</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SFX">
				<xs:annotation>
					<xs:documentation>Suffix : A suffix has a strong association to the immediately preceding name part. A suffix has no implicit leading white space (it has implicit trailing white space though).</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="EntityNamePartType">
		<xs:annotation>
			<xs:documentation>Indicates whether the name part is a given name, family name, prefix, suffix, etc. 

CodeSystem "EntityNamePartTypeR2", OID: 2.16.840.1.113883.5.1122, Owner: HL7 </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="FAM">
				<xs:annotation>
					<xs:documentation>Family : Family name, this is the name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="GIV">
				<xs:annotation>
					<xs:documentation>Given: Given name.
Note: don't call it "first name" since this given names do not always come first</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="TITLE">
				<xs:annotation>
					<xs:documentation>Title : Part of the name that is acquired as a title due to academic, legal, employment or nobility status etc.
Note: Title name parts include name parts that come after the name such as qualifications</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DEL">
				<xs:annotation>
					<xs:documentation>Delimiter : A delimiter has no meaning other than being literally printed in this name representation. A delimiter has no implicit leading and trailing white space</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="EntityNameUse">
		<xs:annotation>
			<xs:documentation>A set of codes advising a system or user which name in a set of names to select for a given purpose. 

CodeSystem "EntityNameUseR2", OID: 2.16.840.1.113883.5.1120, Owner: HL7</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="ABC">
				<xs:annotation>
					<xs:documentation>Alphabetic: Alphabetic transcription of name (Japanese: romaji)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="IDE">
				<xs:annotation>
					<xs:documentation>Ideographic : Ideographic representation of name (e.g., Japanese kanji, Chinese characters) </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SYL">
				<xs:annotation>
					<xs:documentation>Syllabic: Syllabic transcription of name (e.g., Japanese kana, Korean hangul)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="C">
				<xs:annotation>
					<xs:documentation>Customary : Known as/conventional/the one you normally use</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="OR">
				<xs:annotation>
					<xs:documentation>Official Registry Name : the formal name as registered in an official (government) registry, but which name might not be commonly used. May correspond to the concept of legal name</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="T">
				<xs:annotation>
					<xs:documentation>Temporary : A temporary name.  Note that a name valid time can provide more detailed information.  This may also be used for temporary names assigned at birth or in emergency situations.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="I">
				<xs:annotation>
					<xs:documentation>Indigenous/Tribal: e.g. Chief Red Cloud</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="P">
				<xs:annotation>
					<xs:documentation>Other/Pseudonym/Alias: A non-official name by which the person is sometimes known.  (This may also be used to record informal names such as a nickname)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="ANON">
				<xs:annotation>
					<xs:documentation>Anonymous : Anonymous assigned name (used to protect a person's identity for privacy reasons)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="A">
				<xs:annotation>
					<xs:documentation>Business Name : A name used in a Professional or Business context .
  
Examples: Continuing to use a maiden name in a professional context, or using a stage performing name (some of these names are also pseudonyms)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="R">
				<xs:annotation>
					<xs:documentation>Religious : A name assumed as part of a religious vocation. e.g. Sister Mary Francis, Brother John</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="OLD">
				<xs:annotation>
					<xs:documentation>No Longer in Use : This name is no longer in use (note: Names may also carry valid time ranges .  This code is used to cover the situations where it is known that the name is no longer valid, but no particular time range for its use is known)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DN">
				<xs:annotation>
					<xs:documentation>Do Not Use : This name should no longer be used when interacting with the person (i.e .  in addition to no longer being used, the name should not be even mentioned when interacting with the person)

Note: applications are not required to compare names labeled "Do Not Use" and other names in order to eliminate name parts that are common between the other name and a name labeled "Do Not Use".</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="M">
				<xs:annotation>
					<xs:documentation>Maiden Name : A name used prior to marriage.

Note that marriage naming customs vary greatly around the world.  This name use is for use by applications that collect and store "maiden" names. Though the concept of maiden name is often gender specific, the use of this term is not gender specific.  The use of this term does not imply any particular history for a person's name, nor should the maiden name be determined algorithmically</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PHON">
				<xs:annotation>
					<xs:documentation>Phonetic : The name as understood by the data enterer, i.e. a close approximation of a phonetic spelling of the name, not based on a phonetic algorithm.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SRCH">
				<xs:annotation>
					<xs:documentation>Search Type Uses: A name intended for use in searching or matching</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="ENXP">
		<xs:annotation>
			<xs:documentation>A part with a type code signifying the role of the part in the whole entity name, and qualifier codes for more detail about the name part type. (Typical name parts for person names are given names, and family names, titles, etc.). </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="XP">
				<xs:attribute name="type" type="EntityNamePartType" use="required">
					<xs:annotation>
						<xs:documentation>Indicates whether the name part is a given name, family name, prefix, suffix, etc. 
The value of this attribute SHALL be taken from the HL7 EntityNamePartType2 code system.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="qualifier" type="set_EntityNamePartQualifier" use="optional">
					<xs:annotation>
						<xs:documentation>The qualifier is a set of codes each of which specifies a certain subcategory of the name part in addition to the main name part type.
For example, a given name may be flagged as a nickname (CL), a family name may be a name acquired by marriage (SP) or a name from birth (BR).
If populated, the values contained in this attribute SHALL be taken from the HL7 EntityNamePartQualifier2 code system.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="HXIT" abstract="true">
		<xs:annotation>
			<xs:documentation>Information about the history of this value: period of validity and a reference to an identified event that established this value as valid.

Because of the way that the types are defined, a number of attributes of the datatypes have values with a type derived from HXIT. In these cases the HXIT attributes are constrained to null. The only case where the HXIT attributes are allowed within a datatype is on items in a collection (DSET, LIST, BAG, HIST).
The use of these attributes is generally subject to further constraints in the specifications that make use of these types.

This class is maintained here despite the lack of attributes to maintain compatibility with the ISO 21090 data structure.</xs:documentation>
		</xs:annotation>
	</xs:complexType>
	<xs:complexType name="II">
		<xs:annotation>
			<xs:documentation>An identifier that uniquely identifies a thing or object. 

Examples are object identifier for HL7 RIM objects, medical record number, order id, service catalog item id, Vehicle Identification Number (VIN), etc. Instance identifiers are usually defined based on ISO object identifiers.

An identifier allows someone to select one record, object or thing from a set of candidates. Usually an identifier alone without any context is not usable. Identifiers are distinguished from concept descriptors as concept descriptors never identify an individual thing, although there may sometimes be an individual record or object that represents the concept.

Information Processing Entities claiming direct or indirect conformance SHALL never assume that receiving applications can infer the identity of issuing authority or the type of the identifier from the identifier or components thereof.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ANY">
				<xs:attribute name="root" type="Uid" use="required">
					<xs:annotation>
						<xs:documentation>A unique identifier that guarantees the global uniqueness of the instance identifier. 
If root is populated, and there is no extension, then the root is a globally unique identifier in its own right. In the presence of a non-null extension, the root is the unique identifier for the "namespace" of the identifier in the extension. Note that this does NOT necessarily correlate with the organization that manages the issuing of the identifiers. A given organization may manage multiple identifier namespaces, and control over a given namespace may transfer from organization to organization over time while the root remains the same. 
This field can be either a DCE UUID, an Object Identifier (OID), or a special identifier taken from lists that may be published by ISO or HL7. 
Comparison of root values is always case sensitive. UUID's SHALL be represented in upper case, so UUID case should always be preserved. 
The root SHALL not be used to carry semantic meaning - all it does is ensure global computational uniqueness.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="extension" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation>A character string as a unique identifier within the scope of the identifier root. 
The root and extension scheme means that the concatenation of root and extension SHALL be a globally unique identifier for the item that this II value identifies.
Some identifier schemes define certain style options to their code values. For example, the U.S. Social Security Number (SSN) is normally written with dashes that group the digits into a pattern "123-12-1234". However, the dashes are not meaningful and a SSN can also be represented as "123121234" without the dashes. In the case where identifier schemes provide for multiple representations, HL7 or ISO may make a ruling about which is the preferred form and document that ruling where that respective external identifier scheme is recognized.
If no extension attribute is provided in a non-null II, then the root is the complete unique identifier. </xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="identifierName" type="xs:string" use="optional">
					<xs:annotation>
						<xs:documentation>A human readable description for this identifier.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="INT">
		<xs:annotation>
			<xs:documentation>Integer numbers (-1,0,1,2, 100, 3398129, etc.) are precise numbers that are results of counting and enumerating. Integer numbers are discrete, the set of integers is infinite but countable. No arbitrary limit is imposed on the range of integer numbers.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="QTY">
				<xs:attribute name="value" type="xs:integer" use="required">
					<xs:annotation>
						<xs:documentation>The value of the INT. Note that this specification imposes no limitations on the size of integer, but most implementations will map this to a 32 or 64 bit integer.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="IntegrityCheckAlgorithm">
		<xs:annotation>
			<xs:documentation>The algorithm used to compute the integrityCheck value.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="SHA1">
				<xs:annotation>
					<xs:documentation>Secure Hash Algorithm - 1 : This algorithm is defined in FIPS PUB 180-1: Secure Hash Standard. As of April 17, 1995 </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SHA256">
				<xs:annotation>
					<xs:documentation>Secure Hash Algorithm - 256 : This algorithm is defined in FIPS PUB 180-2: Secure Hash Standard </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="IVL">
		<xs:annotation>
			<xs:documentation>A set of consecutive values of an ordered base datatype. 

Any ordered type can be the basis of an IVL; it does not matter whether the base type is discrete or continuous. If the base datatype is only partially ordered, all elements of the IVL must be elements of a totally ordered subset of the partially ordered datatype. For example, PQ is considered ordered. However the ordering of PQs is only partial; a total order is only defined among comparable quantities (quantities of the same physical dimension). While IVLs between 2 and 4 meter exists, there is no IVL between 2 meters and 4 seconds

This class is maintained here despite the lack of attributes to maintain compatibility with the ISO 21090 data structure.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="QSET"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IVL_CO">
		<xs:annotation>
			<xs:documentation>A set of consecutive values of an ordered base datatype. 

Any ordered type can be the basis of an IVL; it does not matter whether the base type is discrete or continuous. If the base datatype is only partially ordered, all elements of the IVL must be elements of a totally ordered subset of the partially ordered datatype. For example, PQ is considered ordered. However the ordering of PQs is only partial; a total order is only defined among comparable quantities (quantities of the same physical dimension). While IVLs between 2 and 4 meter exists, there is no IVL between 2 meters and 4 seconds</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="IVL">
				<xs:sequence>
					<xs:element name="low" type="CO" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This is the low limit. If the low limit is not known, it may be null.
The low limit SHALL NOT be positive infinity.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="high" type="CO" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This is the high limit. If the high limit is not known, it may be null.
The high limit SHALL NOT be negative infinity, and SHALL be higher than the low limit if one exists.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="lowClosed" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>This attribute is called lowIsClosed in the ISO 21090 specification and lowClosed in the HL7 Data Types R2 specification.

Whether low is included in the IVL (is closed) or excluded from the IVL (is open).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="highClosed" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>This attribute is called highIsClosed in the ISO 21090 specification and highClosed in the HL7 Data Types R2 specification.

Whether high is included in the IVL (is closed) or excluded from the IVL (is open).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IVL_INT">
		<xs:annotation>
			<xs:documentation>A set of consecutive values of an ordered base datatype. 

Any ordered type can be the basis of an IVL; it does not matter whether the base type is discrete or continuous. If the base datatype is only partially ordered, all elements of the IVL must be elements of a totally ordered subset of the partially ordered datatype. For example, PQ is considered ordered. However the ordering of PQs is only partial; a total order is only defined among comparable quantities (quantities of the same physical dimension). While IVLs between 2 and 4 meter exists, there is no IVL between 2 meters and 4 seconds.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="IVL">
				<xs:sequence>
					<xs:element name="low" type="INT" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This is the low limit. If the low limit is not known, it may be null.
The low limit SHALL NOT be positive infinity.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="high" type="INT" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This is the high limit. If the high limit is not known, it may be null.
The high limit SHALL NOT be negative infinity, and SHALL be higher than the low limit if one exists.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="lowClosed" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>This attribute is called lowIsClosed in the ISO 21090 specification and lowClosed in the HL7 Data Types R2 specification.

Whether low is included in the IVL (is closed) or excluded from the IVL (is open).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="highClosed" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>This attribute is called highIsClosed in the ISO 21090 specification and highClosed in the HL7 Data Types R2 specification.

Whether high is included in the IVL (is closed) or excluded from the IVL (is open).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IVL_PQ">
		<xs:annotation>
			<xs:documentation>A set of consecutive values of an ordered base datatype. 

Any ordered type can be the basis of an IVL; it does not matter whether the base type is discrete or continuous. If the base datatype is only partially ordered, all elements of the IVL must be elements of a totally ordered subset of the partially ordered datatype. For example, PQ is considered ordered. However the ordering of PQs is only partial; a total order is only defined among comparable quantities (quantities of the same physical dimension). While IVLs between 2 and 4 meter exists, there is no IVL between 2 meters and 4 seconds.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="IVL">
				<xs:sequence>
					<xs:element name="low" type="PQ" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This is the low limit. If the low limit is not known, it may be null.
The low limit SHALL NOT be positive infinity.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="high" type="PQ" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This is the high limit. If the high limit is not known, it may be null.
The high limit SHALL NOT be negative infinity, and SHALL be higher than the low limit if one exists.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="lowClosed" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>This attribute is called lowIsClosed in the ISO 21090 specification and lowClosed in the HL7 Data Types R2 specification.

Whether low is included in the IVL (is closed) or excluded from the IVL (is open).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="highClosed" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>Whether high is included in the IVL (is closed) or excluded from the IVL (is open).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IVL_QTY">
		<xs:annotation>
			<xs:documentation>A set of consecutive values of an ordered base datatype. 

Any ordered type can be the basis of an IVL; it does not matter whether the base type is discrete or continuous. If the base datatype is only partially ordered, all elements of the IVL must be elements of a totally ordered subset of the partially ordered datatype. For example, PQ is considered ordered. However the ordering of PQs is only partial; a total order is only defined among comparable quantities (quantities of the same physical dimension). While IVLs between 2 and 4 meter exists, there is no IVL between 2 meters and 4 seconds. </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="IVL">
				<xs:sequence>
					<xs:element name="low" type="QTY" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This is the low limit. If the low limit is not known, it may be null.
The low limit SHALL NOT be positive infinity.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="high" type="QTY" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This is the high limit. If the high limit is not known, it may be null.
The high limit SHALL NOT be negative infinity, and SHALL be higher than the low limit if one exists.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="lowClosed" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>This attribute is called lowIsClosed in the ISO 21090 specification and lowClosed in the HL7 Data Types R2 specification.

Whether low is included in the IVL (is closed) or excluded from the IVL (is open).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="highClosed" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>This attribute is called highIsClosed in the ISO 21090 specification and highClosed in the HL7 Data Types R2 specification.

Whether high is included in the IVL (is closed) or excluded from the IVL (is open).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IVL_REAL">
		<xs:annotation>
			<xs:documentation>A set of consecutive values of an ordered base datatype. 

Any ordered type can be the basis of an IVL; it does not matter whether the base type is discrete or continuous. If the base datatype is only partially ordered, all elements of the IVL must be elements of a totally ordered subset of the partially ordered datatype. For example, PQ is considered ordered. However the ordering of PQs is only partial; a total order is only defined among comparable quantities (quantities of the same physical dimension). While IVLs between 2 and 4 meter exists, there is no IVL between 2 meters and 4 seconds.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="IVL">
				<xs:sequence>
					<xs:element name="low" type="REAL" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This is the low limit. If the low limit is not known, it may be null.
The low limit SHALL NOT be positive infinity.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="high" type="REAL" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This is the high limit. If the high limit is not known, it may be null.
The high limit SHALL NOT be negative infinity, and SHALL be higher than the low limit if one exists.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="lowClosed" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>This attribute is called lowIsClosed in the ISO 21090 specification and lowClosed in the HL7 Data Types R2 specification.

Whether low is included in the IVL (is closed) or excluded from the IVL (is open).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="highClosed" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>This attribute is called highIsClosed in the ISO 21090 specification and highClosed in the HL7 Data Types R2 specification.

Whether high is included in the IVL (is closed) or excluded from the IVL (is open).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IVL_TS">
		<xs:annotation>
			<xs:documentation>A set of consecutive values of an ordered base datatype. 

Any ordered type can be the basis of an IVL; it does not matter whether the base type is discrete or continuous. If the base datatype is only partially ordered, all elements of the IVL must be elements of a totally ordered subset of the partially ordered datatype. For example, PQ is considered ordered. However the ordering of PQs is only partial; a total order is only defined among comparable quantities (quantities of the same physical dimension). While IVLs between 2 and 4 meter exists, there is no IVL between 2 meters and 4 seconds.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="IVL">
				<xs:sequence>
					<xs:element name="low" type="TS" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This is the low limit. If the low limit is not known, it may be null.
The low limit SHALL NOT be positive infinity.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="high" type="TS" minOccurs="0">
						<xs:annotation>
							<xs:documentation>This is the high limit. If the high limit is not known, it may be null.
The high limit SHALL NOT be negative infinity, and SHALL be higher than the low limit if one exists.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="lowClosed" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>This attribute is called lowIsClosed in the ISO 21090 specification and lowClosed in the HL7 Data Types R2 specification.

Whether low is included in the IVL (is closed) or excluded from the IVL (is open).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="highClosed" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>This attribute is called highIsClosed in the ISO 21090 specification and highClosed in the HL7 Data Types R2 specification.

Whether high is included in the IVL (is closed) or excluded from the IVL (is open).</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="PIVL_TS">
		<xs:annotation>
			<xs:documentation>An interval of time that recurs periodically. PIVL has two properties, phase and period/frequency. phase specifies the "interval prototype" that is repeated on the period/frequency.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="QTY">
				<xs:sequence>
					<xs:element name="phase" type="IVL_TS" minOccurs="0">
						<xs:annotation>
							<xs:documentation>A prototype of the repeating interval, specifying the duration of each occurrence and anchors the PIVL sequence at a certain point in time. phase also marks the anchor point in time for the entire series of periodically recurring intervals. If count is null or nullFlavored, the recurrence of a PIVL has no beginning or ending, but is infinite in both future and past. 

The width of the phase SHALL be less than or equal to the period</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="period" type="PQ" minOccurs="0">
						<xs:annotation>
							<xs:documentation>A time duration specified as a reciprocal measure of the frequency at which the PIVL repeats.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="frequency" type="RTO" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The number of times the PIVL repeats (numerator) within a specified time-period (denominator). The numerator is an integer, and the denominator is a PQ.TIME.

Only one of period and frequency should be specified. The form chosen should be the form that most naturally conveys the idea to humans. i.e. Every 10 mins (period) or twice a day (frequency).</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="count" type="INT" minOccurs="0">
						<xs:annotation>
							<xs:documentation>The number of times the period repeats in total. If count is null, then the period repeats indefinitely both before and after the anchor implicit in the phase.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attribute name="alignment" type="CalendarCycle" use="optional"/>
				<xs:attribute name="isFlexible" type="xs:boolean" use="optional">
					<xs:annotation>
						<xs:documentation>Indicates whether the exact timing is up to the party executing the schedule e.g., to distinguish "every 8 hours" from "3 times a day".

Note: this is sometimes referred to as "institution specified timing".</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="PostalAddressUse">
		<xs:annotation>
			<xs:documentation>A set of codes advising a system or user which address in a set of like addresses to select for a given purpose. 

CodeSystem "PostalAddressUse", OID: 2.16.840.1.113883.5.1012, Owner: HL7 </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="H">
				<xs:annotation>
					<xs:documentation>Home address : A communication address at a home, attempted contacts for business purposes might intrude privacy and chances are one will contact family or other household members instead of the person one wishes to call. Typically used with urgent cases, or if no other contacts are available.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="HP">
				<xs:annotation>
					<xs:documentation>Primary Home: The primary home, to reach a person after business hours.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="HV">
				<xs:annotation>
					<xs:documentation>Vacation Home: A vacation home, to reach a person while on vacation.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="WP">
				<xs:annotation>
					<xs:documentation>Work Place: An office address. First choice for business related contacts during business hours.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DIR">
				<xs:annotation>
					<xs:documentation>Direct: Indicates a work place address or telecommunication address that reaches the individual or organization directly without intermediaries. For phones, often referred to as a 'private line'. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PUB">
				<xs:annotation>
					<xs:documentation>Public: Indicates a work place address or telecommunication address that is a 'standard' address which may reach a reception service, mail-room, or other intermediary prior to the target entity. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BAD">
				<xs:annotation>
					<xs:documentation>Bad Address: A flag indicating that the address is bad, in fact, useless.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PHYS">
				<xs:annotation>
					<xs:documentation>Physical Visit Address: Used primarily to visit an address.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PST">
				<xs:annotation>
					<xs:documentation>Postal Address: Used to send mail.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="TMP">
				<xs:annotation>
					<xs:documentation>Temporary Address: A temporary address, may be good for visit or mailing. Note that an address history can provide more detailed information.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="ABC">
				<xs:annotation>
					<xs:documentation>Alphabetic: Alphabetic transcription of name (Japanese: romaji)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="IDE">
				<xs:annotation>
					<xs:documentation>Ideographic: Ideographic representation of name (e.g., Japanese kanji, Chinese characters)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SYL">
				<xs:annotation>
					<xs:documentation>Syllabic: Syllabic transcription of name (e.g., Japanese kana, Korean hangul)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SRCH">
				<xs:annotation>
					<xs:documentation>Search Type Uses: A name intended for use in searching or matching.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="SNDX">
				<xs:annotation>
					<xs:documentation>Soundex: An address spelled according to the SoundEx algorithm.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PHON">
				<xs:annotation>
					<xs:documentation>Phonetic: The address as understood by the data enterer, i.e. a close approximation of a phonetic spelling of the address, not based on a phonetic algorithm. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="PQ">
		<xs:annotation>
			<xs:documentation>A dimensioned quantity expressing the result of measuring.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="QTY">
				<xs:attribute name="value" type="Decimal" use="required">
					<xs:annotation>
						<xs:documentation>The number which is multiplied by the unit to make the PQ.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="unit" type="Code" use="required">
					<xs:annotation>
						<xs:documentation>The unit of measure specified in the Unified Code for Units of Measure (UCUM). 
UCUM defines two forms of expression, case sensitive and case insensitive. PQ uses the case sensitive codes. The codeSystem OID for the case sensitive form is 2.16.840.1.113883.6.8. The default value for unit is the UCUM code "1" (unity).
Equality of physical quantities does not require the values and units to be equal independently. Value and unit is only how we represent physical quantities. For example, 1 m equals 100 cm. Although the units are different and the values are different, the physical quantities are equal. Therefore one should never expect a particular unit for a physical quantity but instead allow for automated conversion between different comparable units. 
The unit SHALL come from UCUM, which only specifies unambiguous measurement units. Sometimes it is not clear how some measurements in healthcare map to UCUM codes.
Note: The general pattern for a measurement is  value unit of Thing. In this scheme, the PQ represents the  value and the unit, and the Thing is described by some coded concept that is linked to the PQ by the context of use. This maps obviously to some measurements, such as Patient Body Temperature of 37 Celsius, and 250 mg/day of Salicylate.
However for some measurements that arise in healthcare, the scheme is not so obvious. Two classic examples are 5 Drinks of Beer, and 3 Acetaminophen tablets. At first glance it is tempting to classify these measurements like this: 5 drinks of Beer and 3 Acetaminophen tablets. The problem with this is that UCUM does not support units of "beer", "tablets" or "scoops".
The reason for this is that neither tablets or scoops are proper units. What kind of tablets? How big is the glass? In these kinds of cases, the concept that appears to be a unit needs to further specified before interoperability is established. If a correct amount is required, then it is generally appropriate to specify an exact measurement with an appropriate UCUM unit. If this is not possible, then the concept is not part of the measurement. UCUM provides a unit called unity for use in these cases. The proper way to understand these measurements as 3 1 Acetaminophen tablets, where 1 is the UCUM unit for unity, and the Thing has a qualifier. The context of use will need to provide the extra qualifying information.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="QSET" abstract="true">
		<xs:annotation>
			<xs:documentation>Abstract; specializes ANY

Parameter: T : QTY

An unordered set of distinct values which are quantities. 

Any ordered type can be the basis of an QSET; it does not matter whether the base type is discrete or continuous. If the base datatype is only partially ordered, all elements of the QSET must be elements of a totally ordered subset of the partially ordered datatype (for example, PQ is only ordered when the units are consistent. Every value in a QSET(PQ) must have the same canonical unit).

QSET is an abstract type. A working QSET is specified as an expression tree built using a combination of operator (QSI, QSD, QSU, QSP) and component types (QSC, QSS and IVL; and, for TS, PIVL and EIVL).

QSETs SHALL not contain null or nullFlavored values as members of the set.


This class is maintained here despite the lack of attributes to maintain compatibility with the ISO 21090 data structure.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ANY"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="QTY" abstract="true">
		<xs:annotation>
			<xs:documentation>The quantity datatype is an abstract generalization for all datatypes whose domain values has an order relation (less-or-equal) and where difference is defined in all of the datatype's totally ordered value subsets. 

The quantity type abstraction is needed in defining certain other types, such as the interval, and probability distributions.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ANY"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="REAL">
		<xs:annotation>
			<xs:documentation>Fractional numbers. Typically used whenever quantities are measured, estimated, or computed from other real numbers. The typical representation is decimal, where the number of significant decimal digits is known as the precision.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="QTY">
				<xs:attribute name="value" type="Decimal" use="required">
					<xs:annotation>
						<xs:documentation>The value of the REAL. </xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RTO">
		<xs:annotation>
			<xs:documentation>A quantity constructed as the quotient of a numerator quantity divided by a denominator quantity. 
Common factors in the numerator and denominator are not automatically cancelled out. 
The RTO datatype supports titers (e.g., "1:128") and other quantities produced by laboratories that truly represent ratios. Ratios are not simply "structured numerics", particularly blood pressure measurements (e.g. "120/60") are not ratios.
Notes: 
1.	Ratios are different from rational numbers, i.e., in ratios common factors in the numerator and denominator never cancel out. A ratio of two real or integer numbers is not automatically reduced to a real number. This datatype is not defined to generally represent rational numbers. It is used only if common factors in numerator and denominator are not supposed to cancel out. This is only rarely the case. For observation values, ratios occur almost exclusively with titers. In most other cases, REAL should be used instead of the RTO.
2.	Since many implementation technologies expect generics to be collections, or only have one parameter, RTO is not implemented as a generic in this specification. Constraints at the point where the RTO is used will define which form of QTY are used.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="QTY">
				<xs:sequence>
					<xs:element name="numerator" type="QTY">
						<xs:annotation>
							<xs:documentation>The quantity that is being divided in the ratio</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="denominator" type="QTY">
						<xs:annotation>
							<xs:documentation>The quantity that divides the numerator in the ratio. 
The denominator SHALL not be zero.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="set_EntityNamePartQualifier">
		<xs:list itemType="dt:EntityNamePartQualifier"/>
	</xs:simpleType>
	<xs:simpleType name="set_EntityNameUse">
		<xs:list itemType="dt:EntityNameUse"/>
	</xs:simpleType>
	<xs:simpleType name="set_PostalAddressUse">
		<xs:list itemType="dt:PostalAddressUse"/>
	</xs:simpleType>
	<xs:simpleType name="set_TelecommunicationAddressUse">
		<xs:list itemType="dt:TelecommunicationAddressUse"/>
	</xs:simpleType>
	<xs:simpleType name="set_TelecommunicationCapability">
		<xs:list itemType="dt:TelecommunicationCapability"/>
	</xs:simpleType>
	<xs:complexType name="ST">
		<xs:annotation>
			<xs:documentation>The character string datatype stands for text data, primarily intended for machine processing (e.g., sorting, querying, indexing, etc.) or direct display. Used for names, symbols, presentation and formal expressions.

A ST SHALL have at least one character or else be null.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ANY">
				<xs:attribute name="value" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>The actual content of the string. </xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TEL">
		<xs:annotation>
			<xs:documentation>A locatable resource that is identified by a URI, such as a web page, a telephone number (voice, fax or some other resource mediated by telecommunication equipment), an e-mail address, or any other locatable resource that can be specified by a URL.

The address is specified as a Universal Resource Locator (URL) qualified by time specification and use codes that help in deciding which address to use for a given time and purpose.

The value attribute is constrained to be a uniform resource locator specified according to IETF RFCs 1738 and 2806 when used in this datatype. 

Note:  The intent of this datatype is to be a locator, not an identifier; this datatype is used to refer to a locatable resource using a URL, and knowing the URL allows one to locate the object. However some use cases have arisen where a URI is used to refer to a locatable resource. Though this datatype allows for URIs to be used, the resource identified SHOULD always be locatable. A common use of locatable URIs is to refer to SOAP attachments.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ANY">
				<xs:attribute name="value" type="xs:anyURI" use="required">
					<xs:annotation>
						<xs:documentation>A uniform resource identifier specified according to IETF RFC 2396. 
The URI specifies the protocol and the contact point defined by that protocol for the resource. 
Examples:  Notable uses of the telecommunication address datatype are for telephone and telefax numbers, e-mail addresses, Hypertext references, FTP references, etc.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="use" type="set_TelecommunicationAddressUse" use="optional">
					<xs:annotation>
						<xs:documentation>One or more codes advising system or user which telecommunication address in a set of like addresses to select for a given telecommunication need. 
The telecommunication use code is not a complete classification for equipment types or locations. Its main purpose is to suggest or discourage the use of a particular telecommunication address. There are no easily defined rules that govern the selection of a telecommunication address. Conformance statements may clarify what rules may apply or how additional rules are applied.
If populated, the values contained in this attribute SHALL be taken from the HL7 TelecommunicationAddressUse code system</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="capabilities" type="set_TelecommunicationCapability" use="optional">
					<xs:annotation>
						<xs:documentation>One or more codes advising a system or user what telecommunication capabilities are known to be associated with the telecommunication address. 
If populated, the values contained in this attribute SHALL be taken from the HL7 TelecommunicationCapability code system</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="TelecommunicationAddressUse">
		<xs:annotation>
			<xs:documentation>One or more codes advising a system or user which telecommunication address in a set of like addresses to select for a given telecommunication need. 

CodeSystem "TelecommunicationAddressUse", OID: 2.16.840.1.113883.5.1011, Owner: HL7 </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="H">
				<xs:annotation>
					<xs:documentation>Home address : A communication address at a home, attempted contacts for business purposes might intrude privacy and chances are one will contact family or other household members instead of the person one wishes to call. Typically used with urgent cases, or if no other contacts are available</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="HP">
				<xs:annotation>
					<xs:documentation>Primary Home: The primary home, to reach a person after business hours.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="HV">
				<xs:annotation>
					<xs:documentation>Vacation Home: vacation home, to reach a person while on vacation.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="WP">
				<xs:annotation>
					<xs:documentation>Work Place: An office address. First choice for business related contacts during business hours.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="DIR">
				<xs:annotation>
					<xs:documentation>Direct: Indicates a work place address or telecommunication address that reaches the individual or organization directly without intermediaries. For phones, often referred to as a 'private line'. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PUB">
				<xs:annotation>
					<xs:documentation>Public: Indicates a work place address or telecommunication address that is a 'standard' address which may reach a reception service, mail-room, or other intermediary prior to the target entity. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="BAD">
				<xs:annotation>
					<xs:documentation>Bad Address: A flag indicating that the address is bad, in fact, useless.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="TMP">
				<xs:annotation>
					<xs:documentation>Temporary Address: A temporary address, may be good for visit or mailing. Note that an address history can provide more detailed information.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="AS">
				<xs:annotation>
					<xs:documentation>Answering Service: An automated answering machine used for less urgent cases and if the main purpose of contact is to leave a message or access an automated announcement. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="EC">
				<xs:annotation>
					<xs:documentation>Emergency Contact: A contact specifically designated to be used for emergencies. This is the first choice in emergencies, independent of any other use codes. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="MC">
				<xs:annotation>
					<xs:documentation>Mobile Contact: A telecommunication device that moves and stays with its owner. May have characteristics of all other use codes, suitable for urgent matters, not the first choice for routine business. </xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="PG">
				<xs:annotation>
					<xs:documentation>Pager: A paging device suitable to solicit a callback or to leave a very short message.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TelecommunicationCapability">
		<xs:annotation>
			<xs:documentation>One or more codes advising a system or user what telecommunication capabilities are known to be associated with the telecommunication address. 

CodeSystem "TelecommunicationCapabilities", OID: 2.16.840.1.113883.5.1118, Owner: HL7 </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="voice">
				<xs:annotation>
					<xs:documentation>Voice : This device can receive voice calls (i.e. talking to another person, or a recording device, or a voice activated computer)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="fax">
				<xs:annotation>
					<xs:documentation>Fax : This device can receive faxes.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="data">
				<xs:annotation>
					<xs:documentation>Data : This device can receive data calls (i.e. modem)</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="tty">
				<xs:annotation>
					<xs:documentation>Text : This device is a text telephone.</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="sms">
				<xs:annotation>
					<xs:documentation>SMS : This device can receive SMS messages</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TimeStamp">
		<xs:annotation>
			<xs:documentation>Represents a timestamp such as 20101127235417.123+0930</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[1-2][0-9]{3,3}(((0[1-9])|(1[0-2]))(((0[1-9])|([1-2][0-9])|(3[0-1]))((([0-1][0-9])|(2[0-3]))(([0-5][0-9])(([0-5][0-9])(\.[0-9]{1,4})?)?)?)?)?)?([+\-](0[0-9]|1[0-3])([0-5][0-9]))?"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="TS">
		<xs:annotation>
			<xs:documentation>A quantity specifying a point on the axis of natural time. A point in time is most often represented as a calendar expression.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="QTY">
				<xs:attribute name="value" type="TimeStamp" use="required">
					<xs:annotation>
						<xs:documentation>The value of the TS. value is a string with the format "YYYY[MM[DD[HH[MM[SS[.U[U[U[U]]]]]]]]][+|-ZZzz]" that conforms to the constrained ISO 8601 defined in ISO 8824 (ASN.1) under clause 32 (generalized time). The format should be used to the degree of precision that is appropriate.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="Uid">
		<xs:annotation>
			<xs:documentation>A unique identifier string is a character string which identifies an object in a globally unique and timeless manner. The allowable formats and values and procedures of this data type are strictly controlled by HL7. At this time, user-assigned identifiers SHALL only be certain character representations of ISO Object Identifiers (OID) and DCE Universally Unique Identifiers (UUID). In addition, HL7 reserves the right to assign other forms of UIDs (RUID), such as mnemonic identifiers for code systems. 
The sole purpose of UID is to be a globally and timelessly unique identifier. The form of UID, whether it is an OID, a UUID or a RUID, is entirely irrelevant. As far as HL7 is concerned, the only thing one can do with a UID is denote to the object for which it stands. Comparison of UIDs is literal, i.e. if two UIDs are literally identical, they are assumed to denote to the same object. If two UIDs are not literally identical they may not denote to the same object. Note that this comparison is case sensitive; (OID)s do not have letters subject to case, (UUID)s are fixed to uppercase, and (RUID)s have a fixed case. 
protected type UniqueIdentifierString alias UID specializes ST.SIMPLE;
No difference in semantics is recognized between the different allowed forms of UID. The different forms are not distinguished by a component within or aside from the identifier string itself. 
Even though this specification recognizes no semantic difference between the different forms of the unique identifier forms, there are differences of how these identifiers are built and managed, which is the sole reason to define subtypes of UID for each of the variants. </xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<xs:simpleType name="Uri">
		<xs:annotation>
			<xs:documentation>Universal Resource Identifier</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<xs:complexType name="XP">
		<xs:annotation>
			<xs:documentation>A part of a name or address. Each part is a character string.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="value" type="xs:string" use="required">
			<xs:annotation>
				<xs:documentation>The actual string value of the part.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
</xs:schema>
